class Solution {

    public int FirstOCurrance(int[] nums, int target) {
        int s = 0;
        int e = nums.length - 1;
        int index = -1;
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (nums[mid] == target) {
                index = mid; // Update index and search left for the first occurrence
                e = mid - 1;
            } else if (target > nums[mid]) {
                s = mid + 1; // Target is in the right half
            } else {
                e = mid - 1; // Target is in the left half
            }
        }
        return index;
    }

    public int LastOCurrance(int[] nums, int target) {
        int s = 0;
        int e = nums.length - 1;
        int index = -1;
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (nums[mid] == target) {
                index = mid; // Update index and search right for the last occurrence
                s = mid + 1;
            } else if (target > nums[mid]) {
                s = mid + 1; // Target is in the right half
            } else {
                e = mid - 1; // Target is in the left half
            }
        }
        return index;
    }

    public int[] searchRange(int[] nums, int target) {
        int[] ans = new int[2];
        ans[0] = FirstOCurrance(nums, target);
        ans[1] = LastOCurrance(nums, target);
        return ans;
    }

}
